// <auto-generated />
using System;
using Core.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(TSTDBContext))]
    [Migration("20221217165456_addSemesterToPayments")]
    partial class addSemesterToPayments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.AdmissionType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdmissionTypes");
                });

            modelBuilder.Entity("Core.Entities.APIUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StudentNumber");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Batch", b =>
                {
                    b.Property<string>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BatchID");

                    b.Property<string>("BatchDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BatchId");

                    b.ToTable("batches", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CardFee", b =>
                {
                    b.Property<decimal>("BatchId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("BatchID");

                    b.Property<decimal>("Semester")
                        .HasColumnType("numeric(18,0)");

                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("CardFees")
                        .HasColumnType("numeric(18,0)");

                    b.Property<decimal>("CardFeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("CardFeesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("CardFeesId"), 1L, 1);

                    b.Property<decimal?>("ProgramId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ProgramID");

                    b.HasKey("BatchId", "Semester", "FacultyNumber");

                    b.ToTable("CardFees");
                });

            modelBuilder.Entity("Core.Entities.CardRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestStatusId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentNumber");

                    b.ToTable("CardRequests");
                });

            modelBuilder.Entity("Core.Entities.CertificateRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullNameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestStatusId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentNumber");

                    b.ToTable("CertificateRequests");
                });

            modelBuilder.Entity("Core.Entities.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Core.Entities.Course97", b =>
                {
                    b.Property<string>("Subjectcode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("subjectcode");

                    b.Property<double?>("Departments")
                        .HasColumnType("float");

                    b.Property<string>("FacultyNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('10')");

                    b.Property<double?>("Hours")
                        .HasColumnType("float");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ID");

                    b.Property<double?>("Semester")
                        .HasColumnType("float")
                        .HasColumnName("semester");

                    b.Property<string>("SubjectName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Subjectcode");

                    b.ToTable("Course97", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Currency", b =>
                {
                    b.Property<string>("CurrencyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CurrencyNo")
                        .HasColumnType("int");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Core.Entities.Department", b =>
                {
                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DegreeOfferA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DegreeOfferE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FacultyNumber", "DepartmentNumber");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Core.Entities.EnrollmentRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequestStatusId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentNumber");

                    b.ToTable("EnrollmentRequests");
                });

            modelBuilder.Entity("Core.Entities.Faculty", b =>
                {
                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacultyNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacultyNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FacultyNumber");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Core.Entities.GetArchive", b =>
                {
                    b.Property<DateTime?>("AddmissionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AddmissionFormNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Addmissiontype")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("addmissiontype");

                    b.Property<string>("Address")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("BatchDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("BatchGradeId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("BatchGradeID");

                    b.Property<decimal?>("BatchId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("BatchID");

                    b.Property<decimal?>("BatchSubjectId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("BatchSubjectID");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<short?>("CHours")
                        .HasColumnType("smallint")
                        .HasColumnName("c_hours");

                    b.Property<float?>("CPoints")
                        .HasColumnType("real")
                        .HasColumnName("c_points");

                    b.Property<string>("CertificateType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<float?>("Cgpa")
                        .HasColumnType("real")
                        .HasColumnName("cgpa");

                    b.Property<float?>("Degree")
                        .HasColumnType("real");

                    b.Property<string>("DepartmentNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacultyNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacultyNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<float?>("Gpa")
                        .HasColumnType("real")
                        .HasColumnName("gpa");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HomeLanguage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalityE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ProgramId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProgramNameA")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProgramNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("programNameE");

                    b.Property<string>("ReGrade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReGradeA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReReGrade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReReGradeA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Register")
                        .HasColumnType("bit");

                    b.Property<decimal?>("RegistrationFees")
                        .HasColumnType("numeric(18,2)");

                    b.Property<short?>("SHours")
                        .HasColumnType("smallint")
                        .HasColumnName("s_hours");

                    b.Property<float?>("SPoints")
                        .HasColumnType("real")
                        .HasColumnName("s_points");

                    b.Property<long>("Semester")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("StudentId")
                        .HasColumnType("numeric(38,0)")
                        .HasColumnName("StudentID");

                    b.Property<string>("StudentNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("StudyFees")
                        .HasColumnType("numeric(24,2)");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectGrade")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("SubjectGradeA")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long?>("SubjectHour")
                        .HasColumnType("bigint");

                    b.Property<string>("SubjectNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric(18,2)");

                    b.ToView("GetArchive");
                });

            modelBuilder.Entity("Core.Entities.GetStdGrade", b =>
                {
                    b.Property<float?>("Degree")
                        .HasColumnType("real");

                    b.Property<string>("Grade")
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)");

                    b.Property<string>("GradeA")
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)");

                    b.Property<bool?>("Register")
                        .HasColumnType("bit");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectGrade")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("SubjectGradeA")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.ToView("GetStdGrades");
                });

            modelBuilder.Entity("Core.Entities.Gradepoint", b =>
                {
                    b.Property<short?>("CHours")
                        .HasColumnType("smallint")
                        .HasColumnName("c_hours");

                    b.Property<float?>("CPoints")
                        .HasColumnType("real")
                        .HasColumnName("c_points");

                    b.Property<decimal>("Cgpa")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cgpa");

                    b.Property<float?>("Gpa")
                        .HasColumnType("real")
                        .HasColumnName("gpa");

                    b.Property<short?>("SHours")
                        .HasColumnType("smallint")
                        .HasColumnName("s_hours");

                    b.Property<float?>("SPoints")
                        .HasColumnType("real")
                        .HasColumnName("s_points");

                    b.Property<long?>("Semester")
                        .HasColumnType("bigint")
                        .HasColumnName("semester");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("StudentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Gradepoints");
                });

            modelBuilder.Entity("Core.Entities.Guardian", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relashionship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StudentNumber")
                        .IsUnique()
                        .HasFilter("[StudentNumber] IS NOT NULL");

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("Core.Entities.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Core.Entities.MaxSemester", b =>
                {
                    b.Property<decimal>("SemesterNo")
                        .HasColumnType("numeric(18,0)");

                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ProgramId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("TotalHours")
                        .HasColumnType("numeric(18,0)");

                    b.HasKey("SemesterNo", "FacultyNumber", "ProgramId");

                    b.ToTable("MaxSemester", (string)null);
                });

            modelBuilder.Entity("Core.Entities.OTPCode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OTPCodes");
                });

            modelBuilder.Entity("Core.Entities.Payment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CardRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CertificateRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnrollmentRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Semester")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TranscriptRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CardRequestId");

                    b.HasIndex("CertificateRequestId");

                    b.HasIndex("EnrollmentRequestId");

                    b.HasIndex("StudentNumber");

                    b.HasIndex("TranscriptRequestId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Core.Entities.Program", b =>
                {
                    b.Property<decimal>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ProgramID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("ProgramId"), 1L, 1);

                    b.Property<string>("ProgramNameA")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProgramNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("programNameE");

                    b.HasKey("ProgramId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Core.Entities.Registration", b =>
                {
                    b.Property<string>("StudentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Semester")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("SlipNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("CardFees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Feed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Note")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<decimal?>("PayedStudyFees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("RegCourses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("RegistrationFees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RegistrationStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("RegistrationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(10,0)")
                        .HasColumnName("RegistrationTypeID")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SlipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("SlipID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("SlipId"), 1L, 1);

                    b.Property<decimal>("StudentId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("StudentID");

                    b.Property<decimal?>("StudyFees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("StudentNumber", "Semester", "SlipNumber");

                    b.ToTable("Registration", (string)null);
                });

            modelBuilder.Entity("Core.Entities.RegistrationType", b =>
                {
                    b.Property<string>("RegistrationType1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RegistrationType");

                    b.Property<int>("RegistrationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("RegistrationTypeID");

                    b.ToTable("RegistrationTypes");
                });

            modelBuilder.Entity("Core.Entities.Religion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("Core.Entities.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestStatuses");
                });

            modelBuilder.Entity("Core.Entities.Resulttest", b =>
                {
                    b.Property<short?>("CHours")
                        .HasColumnType("smallint")
                        .HasColumnName("c_Hours");

                    b.Property<float?>("CPoints")
                        .HasColumnType("real")
                        .HasColumnName("c_Points");

                    b.Property<float?>("Cgpa")
                        .HasColumnType("real")
                        .HasColumnName("CGPA");

                    b.Property<float?>("Gpa")
                        .HasColumnType("real")
                        .HasColumnName("GPA");

                    b.Property<decimal?>("OrederInResult")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("Pcgpa")
                        .HasColumnType("real")
                        .HasColumnName("PCGPA");

                    b.Property<float?>("Ppcgpa")
                        .HasColumnType("real")
                        .HasColumnName("PPCGPA");

                    b.Property<short?>("SHours")
                        .HasColumnType("smallint")
                        .HasColumnName("s_Hours");

                    b.Property<float?>("SPoints")
                        .HasColumnType("real")
                        .HasColumnName("s_Points");

                    b.Property<string>("Sb1")
                        .IsRequired()
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)")
                        .HasColumnName("SB1");

                    b.Property<string>("Sb2")
                        .IsRequired()
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)")
                        .HasColumnName("SB2");

                    b.Property<string>("Sb3")
                        .IsRequired()
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)")
                        .HasColumnName("SB3");

                    b.Property<string>("Sb4")
                        .IsRequired()
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)")
                        .HasColumnName("SB4");

                    b.Property<string>("Sb5")
                        .IsRequired()
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)")
                        .HasColumnName("SB5");

                    b.Property<string>("Sb6")
                        .IsRequired()
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)")
                        .HasColumnName("SB6");

                    b.Property<string>("Sb7")
                        .IsRequired()
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)")
                        .HasColumnName("SB7");

                    b.Property<string>("Sb8")
                        .IsRequired()
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)")
                        .HasColumnName("SB8");

                    b.Property<string>("Sb9")
                        .IsRequired()
                        .HasMaxLength(107)
                        .HasColumnType("nvarchar(107)")
                        .HasColumnName("SB9");

                    b.Property<float>("Sbd1")
                        .HasColumnType("real")
                        .HasColumnName("SBd1");

                    b.Property<float>("Sbd2")
                        .HasColumnType("real")
                        .HasColumnName("SBd2");

                    b.Property<float>("Sbd3")
                        .HasColumnType("real")
                        .HasColumnName("SBd3");

                    b.Property<float>("Sbd4")
                        .HasColumnType("real")
                        .HasColumnName("SBd4");

                    b.Property<float>("Sbd5")
                        .HasColumnType("real")
                        .HasColumnName("SBd5");

                    b.Property<float>("Sbd6")
                        .HasColumnType("real")
                        .HasColumnName("SBd6");

                    b.Property<float>("Sbd7")
                        .HasColumnType("real")
                        .HasColumnName("SBd7");

                    b.Property<float>("Sbd8")
                        .HasColumnType("real")
                        .HasColumnName("SBd8");

                    b.Property<float>("Sbd9")
                        .HasColumnType("real")
                        .HasColumnName("SBd9");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("StudentId")
                        .HasColumnType("numeric(38,0)")
                        .HasColumnName("StudentID");

                    b.Property<string>("StudentNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("studentNumber");

                    b.ToView("resulttest");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Core.Entities.SemBeginFinish", b =>
                {
                    b.Property<decimal?>("BatchId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("BatchID");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DepartmentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ProgramId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Semester")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("SemBeginFinish", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Semster", b =>
                {
                    b.Property<decimal>("Semster1")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("semster");

                    b.HasKey("Semster1");

                    b.ToTable("Semster", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Service", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Core.Entities.Signature", b =>
                {
                    b.Property<string>("DeanAffairsA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dean_affairsA");

                    b.Property<string>("DeanAffairsE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dean_affairsE");

                    b.Property<string>("DeanFacultyA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dean_facultyA");

                    b.Property<string>("DeanFacultyE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dean_facultyE");

                    b.Property<string>("ExamOfficerA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExamOfficerE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("FacultyNumber")
                        .HasColumnType("numeric(18,0)");

                    b.Property<string>("RegNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("reg_nameA");

                    b.Property<string>("RegNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("reg_nameE");

                    b.ToTable("signature", (string)null);
                });

            modelBuilder.Entity("Core.Entities.State", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.Property<string>("StudentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("AddmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(((1)/(1))/(2000))");

                    b.Property<string>("AddmissionFormNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("((12345))");

                    b.Property<string>("Addmissiontype")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("addmissiontype");

                    b.Property<string>("Address")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AdmissionTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BatchId")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BatchID");

                    b.Property<DateTime?>("Birthdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(((1)/(1))/(2000))");

                    b.Property<string>("CertificateType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CurrencyNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("currencyNo")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("DepartmentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte?>("FirstSemster")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("First_semster")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("GraduationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(((1)/(1))/(2000))");

                    b.Property<string>("HomeLanguage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsERegistrationComplete")
                        .HasColumnType("bit");

                    b.Property<int?>("LastOfLists")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalityE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("OrederInResult")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ParentPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ProgramId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("RegistrationFees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ReligionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("specialization");

                    b.Property<string>("SpecializationE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("specializationE");

                    b.Property<string>("StateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(38,0)")
                        .HasColumnName("StudentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("StudentId"), 1L, 1);

                    b.Property<string>("StudentNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("StudentPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Studentstatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("studentstatus")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("StudyFees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(24,2)")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("StudentNumber");

                    b.HasIndex("AdmissionTypeId");

                    b.HasIndex("BatchId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("StateId");

                    b.HasIndex("FacultyNumber", "DepartmentNumber");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Core.Entities.StudentAttachment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityProof")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonalPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StudentNumber")
                        .IsUnique()
                        .HasFilter("[StudentNumber] IS NOT NULL");

                    b.ToTable("StudentAttachments");
                });

            modelBuilder.Entity("Core.Entities.StudentOutOfResult", b =>
                {
                    b.Property<string>("StudentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Semester")
                        .HasColumnType("int")
                        .HasColumnName("semester");

                    b.HasKey("StudentNumber", "Semester");

                    b.ToTable("StudentOutOfResult", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Studentstemp", b =>
                {
                    b.Property<decimal>("Serial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("serial");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Serial"), 1L, 1);

                    b.Property<string>("ApplicationNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<decimal?>("BatchId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("BatchID");

                    b.Property<string>("DepartmentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Facultynumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ProgramId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("Proiority")
                        .HasColumnType("numeric(18,0)");

                    b.Property<string>("StudentNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("StudyFees")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Serial")
                        .HasName("PK_studentstemp");

                    b.ToTable("Studentstemp", (string)null);
                });

            modelBuilder.Entity("Core.Entities.StudentSubject", b =>
                {
                    b.Property<string>("StudentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("BatchId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("BatchID");

                    b.Property<float?>("Degree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("GradeCounter")
                        .HasColumnType("numeric(18,0)");

                    b.Property<decimal?>("GradeId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("GradeID");

                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("ReGrade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReGradeA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReReGrade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReReGradeA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Register")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Semester")
                        .HasColumnType("bigint");

                    b.Property<string>("SubjectGrade")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("SubjectGradeA")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long?>("SubjectHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("StudentNumber", "SubjectCode");

                    b.HasIndex("SubjectCode");

                    b.ToTable("StudentSubjects");
                });

            modelBuilder.Entity("Core.Entities.Subject", b =>
                {
                    b.Property<string>("SubjectCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SubjectCode");

                    b.Property<string>("DepartmentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("departmentNumber");

                    b.Property<string>("FacultyNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("facultyNumber");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<short?>("SubjectHour")
                        .HasColumnType("smallint");

                    b.Property<string>("SubjectNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubjectCode");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Core.Entities.SubjectMaxDegree", b =>
                {
                    b.Property<string>("SubjectCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Semester")
                        .HasColumnType("numeric(18,0)");

                    b.Property<string>("BatchDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ProgramId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("MaxDegree")
                        .HasColumnType("numeric(18,0)");

                    b.HasKey("SubjectCode", "Semester", "BatchDescription", "ProgramId");

                    b.ToTable("SubjectMaxDegree", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Subjectsall", b =>
                {
                    b.Property<string>("Facultynumber")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<short?>("SubjectHours")
                        .HasColumnType("smallint");

                    b.Property<string>("Subjectcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectnameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("subjectnameA");

                    b.Property<string>("SubjectnameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("subjectnameE");

                    b.ToTable("subjectsall", (string)null);
                });

            modelBuilder.Entity("Core.Entities.SubjectType", b =>
                {
                    b.Property<decimal>("SubjectTypeId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("SubjectTypeID");

                    b.Property<string>("SubjectTypeA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectTypeE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubjectTypeId");

                    b.ToTable("SubjectTypes");
                });

            modelBuilder.Entity("Core.Entities.SystemSetting", b =>
                {
                    b.Property<int?>("ArEnResult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("DblHoursInReGrade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("DblWieghtInReGrade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ProgramId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ProgramID");

                    b.Property<long?>("SemsterNo")
                        .HasColumnType("bigint");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("Core.Entities.TblArchive", b =>
                {
                    b.Property<string>("AddmissionDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddmissionFormNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddmissionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BatchDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BatchGradeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BatchGradeID");

                    b.Property<string>("BatchId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BatchID");

                    b.Property<string>("BatchSubjectId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BatchSubjectID");

                    b.Property<string>("Birthdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CHours")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("c_Hours");

                    b.Property<string>("CPoints")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("c_Points");

                    b.Property<string>("CertificateType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cgpa")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CGPA");

                    b.Property<string>("Degree")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacultyNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacultyNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gpa")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GPA");

                    b.Property<string>("GraduationDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HomeLanguage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalityE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone");

                    b.Property<string>("ProgramId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProgramNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProgramNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Register")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegistrationFees")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Regrade")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("RegradeA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reregrade")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ReregradeA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SHours")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("s_Hours");

                    b.Property<string>("SPoints")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("s_Points");

                    b.Property<string>("Semester")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StudentID");

                    b.Property<string>("StudentNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudyFees")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectGrade")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("SubjectGradeA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectHour")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectNameA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectNameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Weight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("tblArchive", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TblGrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("GradeA")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("XMax")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("xMax");

                    b.Property<decimal?>("XMin")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("xMin");

                    b.HasKey("Id");

                    b.ToTable("tblGrade", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TblSection", b =>
                {
                    b.Property<string>("SubjectCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SubjectCode");

                    b.Property<decimal>("ProgramId")
                        .HasColumnType("numeric(10,0)")
                        .HasColumnName("ProgramID");

                    b.Property<long>("Semester")
                        .HasColumnType("bigint");

                    b.Property<string>("DepartmentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("SectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("SectionId"), 1L, 1);

                    b.Property<decimal>("SubjectCodeId")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SubjectCode", "ProgramId", "Semester", "DepartmentNumber", "FacultyNumber");

                    b.ToTable("TblSections");
                });

            modelBuilder.Entity("Core.Entities.TblStatus", b =>
                {
                    b.Property<decimal>("StatusId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("StatusID");

                    b.Property<string>("Staus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StatusId");

                    b.ToTable("TblStatus", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TranscriptRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullNameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestStatusId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentNumber");

                    b.ToTable("TranscriptRequests");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<decimal>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("UserId"), 1L, 1);

                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UserTypeId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("UserTypeID");

                    b.HasKey("UserId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.UserType", b =>
                {
                    b.Property<decimal>("UserTypeId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("UserTypeID");

                    b.Property<string>("UserTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.APIUser", b =>
                {
                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentNumber");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.CardRequest", b =>
                {
                    b.HasOne("Core.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("Core.Entities.RequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentNumber");

                    b.Navigation("Service");

                    b.Navigation("Status");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.CertificateRequest", b =>
                {
                    b.HasOne("Core.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("Core.Entities.RequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentNumber");

                    b.Navigation("Service");

                    b.Navigation("Status");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Department", b =>
                {
                    b.HasOne("Core.Entities.Faculty", "FacultyNumberNavigation")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyNumber")
                        .IsRequired()
                        .HasConstraintName("FK_Departments_Faculties");

                    b.Navigation("FacultyNumberNavigation");
                });

            modelBuilder.Entity("Core.Entities.EnrollmentRequest", b =>
                {
                    b.HasOne("Core.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("Core.Entities.RequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentNumber");

                    b.Navigation("Service");

                    b.Navigation("Status");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Guardian", b =>
                {
                    b.HasOne("Core.Entities.Student", "Student")
                        .WithOne("Guardian")
                        .HasForeignKey("Core.Entities.Guardian", "StudentNumber");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Invoice", b =>
                {
                    b.HasOne("Core.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Core.Entities.Payment", b =>
                {
                    b.HasOne("Core.Entities.CardRequest", "CardRequest")
                        .WithMany()
                        .HasForeignKey("CardRequestId");

                    b.HasOne("Core.Entities.CertificateRequest", "CertificateRequest")
                        .WithMany()
                        .HasForeignKey("CertificateRequestId");

                    b.HasOne("Core.Entities.EnrollmentRequest", "EnrollmentRequest")
                        .WithMany()
                        .HasForeignKey("EnrollmentRequestId");

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentNumber");

                    b.HasOne("Core.Entities.TranscriptRequest", "TranscriptRequest")
                        .WithMany()
                        .HasForeignKey("TranscriptRequestId");

                    b.Navigation("CardRequest");

                    b.Navigation("CertificateRequest");

                    b.Navigation("EnrollmentRequest");

                    b.Navigation("Student");

                    b.Navigation("TranscriptRequest");
                });

            modelBuilder.Entity("Core.Entities.Registration", b =>
                {
                    b.HasOne("Core.Entities.Student", "StudentNumberNavigation")
                        .WithMany("Registrations")
                        .HasForeignKey("StudentNumber")
                        .IsRequired()
                        .HasConstraintName("FK_Registration_Students");

                    b.Navigation("StudentNumberNavigation");
                });

            modelBuilder.Entity("Core.Entities.State", b =>
                {
                    b.HasOne("Core.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.HasOne("Core.Entities.AdmissionType", "AdmissionType")
                        .WithMany()
                        .HasForeignKey("AdmissionTypeId");

                    b.HasOne("Core.Entities.Batch", "Batch")
                        .WithMany("Students")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_Students_batches");

                    b.HasOne("Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("Students")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_Students_Programs");

                    b.HasOne("Core.Entities.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.HasOne("Core.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("Core.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("FacultyNumber", "DepartmentNumber")
                        .HasConstraintName("FK_Students_Departments");

                    b.Navigation("AdmissionType");

                    b.Navigation("Batch");

                    b.Navigation("Country");

                    b.Navigation("Department");

                    b.Navigation("Program");

                    b.Navigation("Religion");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Core.Entities.StudentAttachment", b =>
                {
                    b.HasOne("Core.Entities.Student", "Student")
                        .WithOne("Attachment")
                        .HasForeignKey("Core.Entities.StudentAttachment", "StudentNumber");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.StudentSubject", b =>
                {
                    b.HasOne("Core.Entities.Student", "StudentNumberNavigation")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentNumber")
                        .IsRequired()
                        .HasConstraintName("FK_StudentSubjects_Students");

                    b.HasOne("Core.Entities.Subject", "SubjectCodeNavigation")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentSubjects_Subjects");

                    b.Navigation("StudentNumberNavigation");

                    b.Navigation("SubjectCodeNavigation");
                });

            modelBuilder.Entity("Core.Entities.TblSection", b =>
                {
                    b.HasOne("Core.Entities.Subject", "SubjectCodeNavigation")
                        .WithMany("TblSections")
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TblSections_Subjects");

                    b.Navigation("SubjectCodeNavigation");
                });

            modelBuilder.Entity("Core.Entities.TranscriptRequest", b =>
                {
                    b.HasOne("Core.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("Core.Entities.RequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentNumber");

                    b.Navigation("Service");

                    b.Navigation("Status");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_UserTypes");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Entities.APIUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Entities.APIUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.APIUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Entities.APIUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Batch", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Core.Entities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Core.Entities.Department", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Core.Entities.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Core.Entities.Program", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.Navigation("Attachment");

                    b.Navigation("Guardian");

                    b.Navigation("Registrations");

                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("Core.Entities.Subject", b =>
                {
                    b.Navigation("StudentSubjects");

                    b.Navigation("TblSections");
                });

            modelBuilder.Entity("Core.Entities.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
